#!/usr/bin/env python3
"""
Script para iniciar la aplicaci√≥n Trading AI
Maneja tanto el backend como la verificaci√≥n de dependencias
"""

import os
import sys
import subprocess
import asyncio
import logging
from pathlib import Path

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def check_python_version():
    """Verifica que la versi√≥n de Python sea compatible"""
    if sys.version_info < (3, 9):
        logger.error("‚ùå Python 3.9 o superior es requerido")
        logger.error(f"Versi√≥n actual: {sys.version}")
        sys.exit(1)
    logger.info(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")

def check_requirements():
    """Verifica que las dependencias est√©n instaladas"""
    try:
        import fastapi
        import motor
        import pandas
        import numpy
        logger.info("‚úÖ Dependencias principales verificadas")
        return True
    except ImportError as e:
        logger.error(f"‚ùå Falta instalar dependencias: {e}")
        logger.info("Ejecuta: pip install -r requirements.txt")
        return False

def check_metatrader5():
    """Verifica la disponibilidad de MetaTrader 5"""
    try:
        import MetaTrader5 as mt5
        if mt5.initialize():
            info = mt5.terminal_info()
            logger.info(f"‚úÖ MetaTrader 5 conectado - {info.name}")
            mt5.shutdown()
            return True
        else:
            logger.warning("‚ö†Ô∏è  MetaTrader 5 no est√° disponible")
            logger.info("La aplicaci√≥n funcionar√° sin datos en tiempo real")
            return False
    except ImportError:
        logger.warning("‚ö†Ô∏è  MetaTrader5 no est√° instalado")
        logger.info("Instala con: pip install MetaTrader5")
        return False

def check_mongodb():
    """Verifica la conexi√≥n a MongoDB"""
    try:
        import pymongo
        import os
        from dotenv import load_dotenv
        load_dotenv(dotenv_path="dev.env")
        mongodb_url = os.getenv("MONGODB_URL")
        
        if not mongodb_url:
            logger.error("‚ùå MONGODB_URL no encontrada en .env")
            return False
        
        client = pymongo.MongoClient(mongodb_url, serverSelectionTimeoutMS=5000)
        client.server_info()
        logger.info("‚úÖ MongoDB conectado")
        client.close()
        return True
    except Exception as e:
        logger.error(f"‚ùå Error conectando a MongoDB: {e}")
        logger.info("Aseg√∫rate de que MongoDB est√© ejecut√°ndose")
        return False

def create_directories():
    """Crea los directorios necesarios"""
    directories = [
        "backend/logs",
        "frontend/dist",
        "data",
        "backups"
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        logger.info(f"üìÅ Directorio creado/verificado: {directory}")

def setup_environment():
    """Configura las variables de entorno"""
    env_file = Path(".env")
    env_example = Path(".env.example")
    
    if not env_file.exists() and env_example.exists():
        logger.info("üìã Copiando .env.example a .env")
        import shutil
        shutil.copy(env_example, env_file)
        logger.warning("‚ö†Ô∏è  Por favor, revisa y actualiza el archivo .env con tus configuraciones")

def start_backend():
    """Inicia el servidor backend FastAPI"""
    logger.info("üöÄ Iniciando servidor backend...")
    
    # Cambiar al directorio backend
    backend_dir = Path("backend")
    if not backend_dir.exists():
        logger.error("‚ùå Directorio backend no encontrado")
        sys.exit(1)
    
    os.chdir(backend_dir)
    
    try:
        import uvicorn
        from config import settings
        
        # Fix para Windows use 127.0.0.1 en lugar de 0.0.0.0
        host = "127.0.0.1" if settings.host == "0.0.0.0" else settings.host
        
        uvicorn.run(
            "main:app",
            host=host,
            port=settings.port,
            reload=settings.debug,
            log_level=settings.log_level.lower(),
            access_log=True
        )
    except KeyboardInterrupt:
        logger.info("üõë Servidor detenido por el usuario")
    except Exception as e:
        logger.error(f"‚ùå Error iniciando el servidor: {e}")
        sys.exit(1)

def run_tests():
    """Ejecuta los tests del sistema"""
    logger.info("üß™ Ejecutando tests...")
    
    try:
        result = subprocess.run(
            ["python", "-m", "pytest", "tests/", "-v"],
            cwd="backend",
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            logger.info("‚úÖ Todos los tests pasaron")
        else:
            logger.error("‚ùå Algunos tests fallaron")
            logger.error(result.stdout)
            logger.error(result.stderr)
            
    except FileNotFoundError:
        logger.warning("‚ö†Ô∏è  pytest no encontrado, saltando tests")

def show_status():
    """Muestra el estado del sistema"""
    logger.info("üìä Estado del sistema Trading AI:")
    logger.info("=" * 50)
    
    # Verificaciones
    python_ok = True  
    deps_ok = check_requirements()
    mt5_ok = check_metatrader5()
    mongo_ok = check_mongodb()
    
    logger.info(f"Python 3.9+: {'‚úÖ' if python_ok else '‚ùå'}")
    logger.info(f"Dependencias: {'‚úÖ' if deps_ok else '‚ùå'}")
    logger.info(f"MetaTrader 5: {'‚úÖ' if mt5_ok else '‚ö†Ô∏è'}")
    logger.info(f"MongoDB: {'‚úÖ' if mongo_ok else '‚ùå'}")
    
    logger.info("=" * 50)
    
    all_critical_ok = python_ok and deps_ok and mongo_ok
    
    if all_critical_ok:
        logger.info("üéâ Sistema listo para funcionar!")
        if not mt5_ok:
            logger.info("üí° Tip: Instala MT5 para datos en tiempo real")
    else:
        logger.error("‚ùå Hay problemas que resolver antes de continuar")
        return False
    
    return True

def main():
    """Funci√≥n principal"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Trading AI - Sistema de Trading con IA")
    parser.add_argument("--check", action="store_true", help="Solo verificar el estado del sistema")
    parser.add_argument("--test", action="store_true", help="Ejecutar tests")
    parser.add_argument("--setup", action="store_true", help="Solo configurar el entorno")
    parser.add_argument("--dev", action="store_true", help="Modo desarrollo con recarga autom√°tica")
    
    args = parser.parse_args()
    
    logger.info("ü§ñ Trading AI - Sistema de Trading con Inteligencia Artificial")
    logger.info("=" * 60)
    
    # Verificaciones iniciales
    check_python_version()
    
    if args.setup:
        logger.info("‚öôÔ∏è  Configurando entorno...")
        create_directories()
        setup_environment()
        logger.info("‚úÖ Configuraci√≥n completada")
        return
    
    if args.check:
        show_status()
        return
    
    if args.test:
        if show_status():
            run_tests()
        return
    

    create_directories()
    setup_environment()
    

    if not show_status():
        logger.error("‚ùå No se puede iniciar debido a problemas en el sistema")
        sys.exit(1)
    

    if args.dev:
        os.environ["DEBUG"] = "true"
        os.environ["LOG_LEVEL"] = "DEBUG"
        logger.info("üîß Modo desarrollo activado")
    

    logger.info(" Iniciando Trading AI...")
    logger.info(" Backend API estar√° disponible en: http://localhost:8000")
    logger.info(" Documentaci√≥n API en: http://localhost:8000/docs")
    logger.info(" Health check en: http://localhost:8000/health")
    logger.info("=" * 60)
    
    try:
        start_backend()
    except KeyboardInterrupt:
        logger.info("\nüëã ¬°Hasta luego! Trading AI detenido.")
    except Exception as e:
        logger.error(f"‚ùå Error cr√≠tico: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()